# import packages
# opensees packages
import openseespy.opensees as ops
import opsvis as ovs
import opstool as otl
#other packages
import numpy as np
import matplotlib.pyplot as plt

# user def modules
from modelUnits import *


def BuildRCrectSection(id, HSec, BSec, coverH, coverB, coreID, coverID, steelID, 
                       numBarsTop, barAreaTop, numBarsBot, barAreaBot, numBarsIntTot, barAreaInt, 
                       nfCoreY, nfCoreZ, nfCoverY, nfCoverZ, plotFibSec = True):
    """
    Build fiber rectangular RC section, 1 steel layer top, 1 bot, 1 skin, confined core

    Adopted from concept by: Silvia Mazzoni, 2006
                adapted from Michael H. Scott, 2003
        
    ## Formal arguments
    id - tag for the section that is generated by this procedure
    HSec - depth of section, along local-y axis
    BSec - width of section, along local-z axis
    coverH - distance from section boundary to neutral axis of reinforcement
    coverB - distance from section boundary to side of reinforcement
    coreID - material tag for the core patch
    coverID - material tag for the cover patches
    steelID - material tag for the reinforcing steel
    numBarsTop - number of reinforcing bars in the top layer
    numBarsBot - number of reinforcing bars in the bottom layer
    numBarsIntTot - TOTAL number of reinforcing bars on the intermediate layers, symmetric about z axis and 2 bars per layer-- needs to be an even integer
    barAreaTop - cross-sectional area of each reinforcing bar in top layer
    barAreaBot - cross-sectional area of each reinforcing bar in bottom layer
    barAreaInt - cross-sectional area of each reinforcing bar in intermediate layer 
    nfCoreY - number of fibers in the core patch in the y direction
    nfCoreZ - number of fibers in the core patch in the z direction
    nfCoverY - number of fibers in the cover patches with long sides in the y direction
    nfCoverZ - number of fibers in the cover patches with long sides in the z direction

        Notes
        The core concrete ends at the NA of the reinforcement
        The center of the section is at (0,0) in the local axis system
        
    """
    coverY = HSec/2.0		# The distance from the section z-axis to the edge of the cover concrete -- outer edge of cover concrete
    coverZ = BSec/2.0		# The distance from the section y-axis to the edge of the cover concrete -- outer edge of cover concrete
    coreY = coverY-coverH		# The distance from the section z-axis to the edge of the core concrete --  edge of the core concrete/inner edge of cover concrete
    coreZ = coverZ-coverB		# The distance from the section y-axis to the edge of the core concrete --  edge of the core concrete/inner edge of cover concrete
    numBarsInt = int(numBarsIntTot/2)	# number of intermediate bars per side

    # Define the fiber section
    ops.section('Fiber', id)
    # Define the core patch
    ops.patch("quad", coreID, nfCoreZ, nfCoreY, *[-coreY, coreZ, -coreY, -coreZ, coreY, -coreZ, coreY, coreZ])
        
    # Define the four cover patches
    ops.patch('quad', coverID, 2, nfCoverY, *[-coverY, coverZ, -coreY, coreZ, coreY, coreZ, coverY, coverZ]) #left cover
    ops.patch('quad', coverID, 2, nfCoverY, *[-coreY, -coreZ, -coverY, -coverZ, coverY, -coverZ, coreY, -coreZ]) #right cover
    ops.patch('quad', coverID, nfCoverZ, 2, *[-coverY, coverZ, -coverY, -coverZ, -coreY, -coreZ, -coreY, coreZ]) # botttom cover
    ops.patch('quad', coverID, nfCoverZ, 2, *[coreY, coreZ, coreY, -coreZ, coverY, -coverZ, coverY, coverZ])	# top cover

    # define reinforcing layers
    ops.layer('straight', steelID, numBarsInt, barAreaInt, *[-coreY, coreZ, coreY, coreZ])	# intermediate skin reinf. +z
    ops.layer('straight', steelID, numBarsInt, barAreaInt, *[-coreY, -coreZ, coreY, -coreZ])	# intermediate skin reinf. -z
    ops.layer('straight', steelID, numBarsTop, barAreaTop, *[coreY, coreZ, coreY, -coreZ])	# top layer reinfocement
    ops.layer('straight', steelID, numBarsBot, barAreaBot, *[-coreY, coreZ,  -coreY, -coreZ])	# bottom layer reinforcement

    fibSecList = [['section', 'Fiber', id],
                    ['patch', 'quad', coreID, nfCoreZ, nfCoreY, *[-coreY, coreZ, -coreY, -coreZ, coreY, -coreZ, coreY, coreZ]],
                    ['patch', 'quad', coverID, 2, nfCoverY, *[-coverY, coverZ, -coreY, coreZ, coreY, coreZ, coverY, coverZ]], 
                    ['patch', 'quad', coverID, 2, nfCoverY, *[-coreY, -coreZ, -coverY, -coverZ, coverY, -coverZ, coreY, -coreZ]], 
                    ['patch', 'quad', coverID, nfCoverZ, 2, *[-coverY, coverZ, -coverY, -coverZ, -coreY, -coreZ, -coreY, coreZ]], 
                    ['patch', 'quad', coverID, nfCoverZ, 2, *[coreY, coreZ, coreY, -coreZ, coverY, -coverZ, coverY, coverZ]],	
                    ['layer', 'straight', steelID, numBarsInt, barAreaInt,  *[-coreY, coreZ, coreY, coreZ]],	
                    ['layer', 'straight', steelID, numBarsInt, barAreaInt,  *[-coreY, -coreZ, coreY, -coreZ]],	
                    ['layer', 'straight', steelID, numBarsTop, barAreaTop, *[coreY, coreZ, coreY, -coreZ]],	
                    ['layer', 'straight', steelID, numBarsBot, barAreaBot,  *[-coreY, coreZ,  -coreY, -coreZ]]
            ]
    
    if plotFibSec:
        matcolor = ['r', 'lightgrey', 'gold', 'r', 'r', 'r']
        ovs.plot_fiber_section(fibSecList, matcolor=matcolor)
        plt.axis('equal')
        plt.title('Fiber Section of the RCC Colum')
        plt.show()

